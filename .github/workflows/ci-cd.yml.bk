name: build push and deploy image
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]    

permissions:
  id-token: write
  contents: read
env:
  AWS_REGION: us-east-1
  AWS_ROLE: ${{secrets.AWS_ACTION_ROLE}} 
  ECR_REPO_NAME: dev 
  IMAGE_TAG: ${{github.run_number}}
  TASK_DEFINITION: nginx-task
  ECS_CLUSTER: nginx-cluster
  ECS_SERVICE: nginx-service
  CONTAINER_NAME: nginx
  

jobs:
  Build:
    runs-on: ubuntu-latest    # github runner, it is github share runner
    steps:
      - name: clone repo
        uses: actions/checkout@v3
      - name: Aws creds config
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{env.AWS_ROLE}}      # OIDC
          aws-region: ${{env.AWS_REGION}}
      - name: Login to ecr
        uses: aws-actions/amazon-ecr-login@v1 
        id: ecr-login
      - name: Build tag and push image
        id: build-and-push
        run: |
            docker build -t ${{steps.ecr-login.outputs.registry}}/${{env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}} .
           
      
      - name: Scan docker Image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{steps.ecr-login.outputs.registry}}/${{env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}"     # Scans the built image
          format: "table"
          exit-code: "0"
          severity: "CRITICAL,HIGH"

      - name: Push image to ecr
        run: |
           docker push ${{steps.ecr-login.outputs.registry}}/${{env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}} 
      - name: Store image in github env
        run: echo "Image=${{steps.ecr-login.outputs.registry}}/${{env.ECR_REPO_NAME}}:${{env.IMAGE_TAG}}" >> $GITHUB_ENV

  Deploy: 
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: 